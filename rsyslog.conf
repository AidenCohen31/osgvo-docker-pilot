global(
DefaultNetstreamDriver="gtls"
DefaultNetstreamDriverCAFile="/etc/pki/rsyslog/ca.crt"
DefaultNetstreamDriverCertFile="/etc/pki/rsyslog/tls.crt"
DefaultNetstreamDriverKeyFile="/etc/pki/rsyslog/tls.key"
)

# Listen to the traditional syslog Unix socket.
module(
load="imuxsock"
SysSock.Unlink="off"
SysSock.UsePIDFromSystem="on"
)

# Look for condor logfiles
module(
load="imfile"
)

# Where to place auxiliary files
global(workDirectory="/pilot/rsyslog")


# Condor-specific logging format
template(name="Condor_SyslogProtocol23Format" type="list")
{
    constant(value="<")
    property(name="pri")
    constant(value=">1 ")
    property(name="timestamp"
             dateFormat="rfc3339")
    constant(value=" ")
    property(name="hostname")
    constant(value=" ")
    property(name="app-name")
    constant(value=" ")
    property(name="msg"
             regex.type="ERE"
             regex.expression="(^[[:digit:]]+\\.[[:digit:]]+ \\(pid\\:([[:digit:]]+)\\))"
             regex.submatch="2"
            )
    constant(value=" - [cat=\"")
    property(name="msg"
             regex.type="ERE"
             regex.expression="(^[[:digit:]]+\\.[[:digit:]]+ \\(pid\\:[[:digit:]]+\\) \\(D_([[:upper:]_]+)\\))"
             regex.submatch="2"
            )
    constant(value="\"] ")
    property(name="msg"
             regex.type="ERE"
             regex.expression="(^[[:digit:]]+\\.[[:digit:]]+ \\(pid\\:[[:digit:]]+\\) \\(D_[[:upper:]_]+\\)) (.*)"
             regex.submatch="2"
            )
    constant(value="\n")
}


template(name="Proc_SyslogProtocol23Format" type="list")
{
    constant(value="<")
    property(name="pri")
    constant(value=">1 ")
    property(name="timestamp"
             dateFormat="rfc3339")
    constant(value=" ")
    property(name="hostname")
    constant(value=" ")
    property(name="app-name")
    constant(value=" - - - ")
    property(name="msg"
             regex.type="ERE"
             regex.expression="(^[[:digit:]]{2}/[[:digit:]]{2}/[[:digit:]]{2} [[:digit:]]{2}\\:[[:digit:]]{2}\\:[[:digit:]]{2} \\: (.*))"
             regex.submatch="2"
            )
    constant(value="\n")
}


ruleset(name="ProcLog") {
  action(type="omfile" file="/dev/stdout"
         template="Proc_SyslogProtocol23Format"
        )
}

ruleset(name="CondorLog") {
  action(type="omfile" file="/dev/stdout"
         template="Condor_SyslogProtocol23Format"
        )

  action(type="omfwd"
    queue.filename="fwdAll"
    queue.maxdiskspace="100m"
    queue.saveonshutdown="off"
    queue.type="LinkedList"
    action.resumeRetryCount="10"
    StreamDriverMode="1"
    StreamDriver="gtls"
    StreamDriverAuthMode="x509/name"
    Target="syslog.osgdev.chtc.io" Port="6514" Protocol="tcp"
  )
}

module(load="builtin:omfile" Template="RSYSLOG_SyslogProtocol23Format")

input(
type="imfile"
File="/pilot/log/MasterLog"
Tag="condor_master"
Facility="local2"
Severity="info"
startmsg.regex="(^[[:digit:]]+\\.[[:digit:]]+ \\(pid)"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/StartLog"
Tag="condor_startd"
Facility="local2"
startmsg.regex="(^[[:digit:]]+\\.[[:digit:]]+ \\(pid)"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/StarterLog.testing"
Tag="condor_starter"
Facility="local2"
startmsg.regex="(^[[:digit:]]+\\.[[:digit:]]+ \\(pid)"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/StarterLog"
Tag="condor_starter"
Facility="local2"
startmsg.regex="^[[:digit:]]+\\.[[:digit:]]+ \\(D_"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/log/StarterLog"
Tag="condor_starter"
Facility="local2"
startmsg.regex="^[[:digit:]]+\\.[[:digit:]]+ \\(D_"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/ProcLog"
Tag="condor_procd"
Facility="local2"
ruleset="ProcLog"
)

# Log all messages to the syslog daemon's stdout.
*.* /dev/stdout

*.* action(type="omfwd"
    queue.filename="fwdAll"
    queue.maxdiskspace="100m"
    queue.saveonshutdown="off"
    queue.type="LinkedList"
    action.resumeRetryCount="10"
    StreamDriverMode="1"
    StreamDriver="gtls"
    StreamDriverAuthMode="x509/name"
    Target="syslog.osgdev.chtc.io" Port="6514" Protocol="tcp")

