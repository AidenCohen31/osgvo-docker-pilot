global(
DefaultNetstreamDriver="gtls"
DefaultNetstreamDriverCAFile="/etc/pki/rsyslog/ca.crt"
DefaultNetstreamDriverCertFile="/etc/pki/rsyslog/tls.crt"
DefaultNetstreamDriverKeyFile="/etc/pki/rsyslog/tls.key"
)

# Listen to the traditional syslog Unix socket.
module(
load="imuxsock"
SysSock.Unlink="off"
SysSock.UsePIDFromSystem="on"
)

# Look for condor logfiles
module(
load="imfile"
PollingInterval="1"
)

# Where to place auxiliary files
global(workDirectory="/pilot/rsyslog/workdir")


template(name="Supervisord_SyslogProtocol23Format" type="list")
{
    constant(value="<")
    property(name="pri")
    constant(value=">1 ")
    property(name="$.date")
    constant(value="T")
    property(name="$.time")
    constant(value="Z ")
    property(name="hostname")
    constant(value=" ")
    property(name="app-name")
    constant(value=" 1 - [level=\"")
    property(name="$.level")
    constant(value="\"] ")
    property(name="msg"
             regex.type="ERE"
             regex.expression="(^[[:digit:][:space:]TZ:,-]+ [[:upper:]]+) (.*)"
             regex.submatch="2"
            )
    constant(value="\n")
}

# Condor-specific logging format
template(name="Condor_SyslogProtocol23Format" type="list")
{
    constant(value="<")
    property(name="pri")
    constant(value=">1 ")
    property(name="$.year")
    constant(value="-")
    property(name="$.month")
    constant(value="-")
    property(name="$.day")
    constant(value="T")
    property(name="$.hour")
    constant(value=":")
    property(name="$.min")
    constant(value=":")
    property(name="$.sec")
    constant(value="Z ")
    property(name="hostname")
    constant(value=" ")
    property(name="app-name")
    constant(value=" ")
    property(name="msg"
             regex.type="ERE"
             regex.expression="(^[[:digit:][:space:]/:.]+ \\(pid\\:([[:digit:]]+)\\))"
             regex.submatch="2"
            )
    constant(value=" - [")
    property(name="$.structure")
    constant(value="] ")
    property(name="msg"
             regex.type="ERE"
             regex.expression="(^[[:digit:][:space:]/:.]+ \\(pid\\:[[:digit:]]+\\) \\(D_[[:upper:]_]+\\)) (.*)"
             regex.submatch="2"
            )
    constant(value="\n")
}


template(name="Proc_SyslogProtocol23Format" type="list")
{
    constant(value="<")
    property(name="pri")
    constant(value=">1 ")
    property(name="$.year")
    constant(value="-")
    property(name="$.month")
    constant(value="-")
    property(name="$.day")
    constant(value="T")
    property(name="$.hour")
    constant(value=":")
    property(name="$.min")
    constant(value=":")
    property(name="$.sec")
    constant(value="Z ")
    constant(value=" ")
    property(name="hostname")
    constant(value=" ")
    property(name="app-name")
    constant(value=" - - - ")
    property(name="msg"
             regex.type="ERE"
             regex.expression="(^[[:digit:]]{2}/[[:digit:]]{2}/[[:digit:]]{2} [[:digit:]]{2}\\:[[:digit:]]{2}\\:[[:digit:]]{2} \\: (.*))"
             regex.submatch="2"
            )
    constant(value="\n")
}

ruleset(name="CondorTimestamp") {
  set $.year = "20" & field(field($msg, 32, 1), 47, 3);
  set $.month = field($msg, 47, 1);
  set $.day = field($msg, 47, 2);

  set $.time = field($msg, 32, 2);
  set $.hour = field($.time, 58, 1);
  set $.min = field($.time, 58, 2);
  set $.sec = field($.time, 58, 3);
}

ruleset(name="ProcLog") {
  call CondorTimestamp
  action(type="omfile" file="/dev/stdout"
         template="Proc_SyslogProtocol23Format"
        )
}

ruleset(name="SupervisordLog") {

  set $.date = field($msg, 32, 1);
  set $.time = replace(field($msg, 32, 2), ",", ".");
  set $.level = field($msg, 32, 3);

  action(type="omfile" file="/dev/stdout"
         template="Supervisord_SyslogProtocol23Format"
        )

  call forwardSupervisord
}

ruleset(name="CondorLog") {

  call CondorTimestamp

  set $.extra!cat = replace(replace(field($msg, 32, 4), "(", ""), ")", "");
  if ($.extra!slot != "") then {
    set $.structure = "cat=\"" & $.extra!cat & "\" slot=\"" & $.extra!slot & "\"";
  } else {
    set $.structure = "cat=\"" & $.extra!cat & "\"";
  }

  action(type="omfile" file="/dev/stdout"
        template="Condor_SyslogProtocol23Format"
        )

  call forwardCondor
}

ruleset(name="StarterLog") {
  set $.extra!slot = field($!metadata!filename, 46, 2);

  call CondorLog
}

module(load="builtin:omfile" Template="RSYSLOG_SyslogProtocol23Format")

# Alternate configuration locations
$IncludeConfig /pilot/rsyslog/conf/*.conf

input(
type="imfile"
File="/pilot/log/MasterLog"
Tag="condor_master"
Facility="local2"
Severity="info"
startmsg.regex="(^[[:digit:][:space:]/:.]+ \\(pid)"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/StartLog"
Tag="condor_startd"
Facility="local2"
startmsg.regex="(^[[:digit:][:space:]/:.]+ \\(pid)"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/StarterLog.*"
Tag="condor_starter"
Facility="local2"
startmsg.regex="(^[[:digit:][:space:]/:.]+ \\(pid)"
addMetadata="on"
ruleset="StarterLog"
)

input(
type="imfile"
File="/pilot/log/StarterLog"
Tag="condor_starter"
Facility="local2"
startmsg.regex="(^[[:digit:][:space:]/:.]+ \\(pid)"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/log/StarterLog"
Tag="condor_starter"
Facility="local2"
startmsg.regex="(^[[:digit:][:space:]/:.]+ \\(pid)"
ruleset="CondorLog"
)

input(
type="imfile"
File="/pilot/log/ProcLog"
Tag="condor_procd"
Facility="local2"
ruleset="ProcLog"
)

input(
type="imfile"
File="/pilot/log/supervisord.log"
Tag="supervisord"
Facility="daemon"
ruleset="SupervisordLog"
)

input(
type="imfile"
File="/tmp/startup.log"
Tag="startup"
Facility="user"
ruleset="forwardRSYSLOG"
)

# Log all messages to the syslog daemon's stdout.
*.* /dev/stdout

call forwardRSYSLOG
